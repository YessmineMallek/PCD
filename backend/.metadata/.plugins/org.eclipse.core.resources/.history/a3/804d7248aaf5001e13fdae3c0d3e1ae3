package com.trainTruck.demo.Controller;

import java.io.IOException;
import java.time.ZoneId;
import java.util.List;

import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.opentripplanner.client.OtpApiClient;
import org.opentripplanner.client.model.Coordinate;
import org.opentripplanner.client.model.Route;
import org.opentripplanner.client.query.GraphQLQueries;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.JsonNode;

@RestController
@RequestMapping("/api/v1/demo-controller")
public class DemoController {
	Coordinate ORIGIN = new Coordinate(52.4885, 13.3398);
	Coordinate DEST = new Coordinate(52.5211, 13.4106);
	OtpApiClient client = new OtpApiClient(ZoneId.of("Africa/Tunis"), "http://localhost:8080");

	@GetMapping("/routes")
	public ResponseEntity<List<Route>> getRoutes() throws IOException 
	{
		var result = client.routes();
		return ResponseEntity.ok(result);

	}
	
	 private JsonNode sendRequest(String formattedQuery) throws IOException {
		    LOG.debug("Sending GraphQL query to {}: {}", graphQlUri, formattedQuery);

		    var body = mapper.createObjectNode();
		    body.put("query", formattedQuery);

		    var bodyString = mapper.writeValueAsString(body);

		    HttpPost httpPost = new HttpPost(graphQlUri);
		    var stringEntity = new StringEntity(bodyString, ContentType.APPLICATION_JSON);
		    httpPost.setEntity(stringEntity);
		    var response = httpClient.execute(httpPost);
		    if (response.getCode() != 200) {
		      throw new IOException(
		          "HTTP request to '%s' returned status code %s".formatted(graphQlUri, response.getCode()));
		    }
		    var jsonNode = mapper.readTree(response.getEntity().getContent());

		    LOG.debug("Received the following JSON: {}", jsonNode.toPrettyString());
		    return jsonNode;
		  }
	  public List<Route> stations() throws IOException {
	    var json = OtpApiClient.sen(GraphQLQueries.routes());
	   
	  }
	@GetMapping
	public ResponseEntity<String> sayHello()
	{
		return ResponseEntity.ok("hello from secured endpoint");
	}

}
